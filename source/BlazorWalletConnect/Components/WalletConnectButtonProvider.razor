@using BlazorWalletConnect.Services
@inject IWalletConnectInterop _walletConnectInterop
@implements IAsyncDisposable

@if (_isConnected)
{
    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>
    <w3m-button />
}
else
{
    <p>Loading...</p>
}


@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private readonly CancellationTokenSource _cancellationTokenSource = new();

    private bool _isConnected;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await _walletConnectInterop.ConfigureAsync(_cancellationTokenSource.Token);
            _isConnected = true;
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await _cancellationTokenSource.CancelAsync();
    }
}
